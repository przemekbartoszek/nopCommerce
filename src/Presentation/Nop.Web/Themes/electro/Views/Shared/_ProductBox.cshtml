@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    var disableAddToCardButton = true;
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<div class="product-item clearfix" data-productid="@Model.Id">
        @if (!Model.IgnorePicture) { 
        <div class="picture thumbnail productview">
            <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})" title="@Model.DefaultPictureModel.Title">
                <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title"/>
            </a>
            <div class="product-box-icon2">
                <button type="button" value="" class="btn hover-btn product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new {SeName = Model.SeName})')">
                    <i class="fa fa-eye"></i> @*@T("Products.Details")*@
                </button>
            </div>
        </div>
        }
        <div class="caption middle-content transition">
            <div class="details">
                @if (Model.ReviewOverviewModel.AllowCustomerReviews)
                {
                    var ratingPercent = 0;
                    if (Model.ReviewOverviewModel.TotalReviews != 0)
                    {
                        ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                    }
                    <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                        <div class="rating">
                            <div style="width: @(ratingPercent)%">
                            </div>
                        </div>
                    </div>
                }
                <h2 style="font-size: 15px"> 
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
                    @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
                    {
                        <br/>
                        <span style="font-size: 12px">
                            @Model.Sku
                        </span>
                    }
                </h2>

                <div class="description">
                    @Html.Raw(Model.ShortDescription)
                </div>
                <div class="add-info">
                    <div class="ash-box">
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
                        <div class="prices">
                            @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                            {
                                <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                            }
                            <span class="price actual-price">@Model.ProductPrice.Price</span>
                            @if (Model.ProductPrice.DisplayTaxShippingInfo)
                            {
                                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                                <span class="tax-shipping-info">
                                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                                </span>
                            }
                            @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                            {
                                <div class="base-price-pangv">
                                    @Model.ProductPrice.BasePricePAngV
                                </div>
                            }
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
                    </div>
                </div>
                <div class="product-box-icon">
                    @if (!Model.ProductPrice.DisableBuyButton)
                    {
                        var addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.ProductPrice.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.ProductPrice.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                    <button type="button" value="" class="btn Addcart product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;">
                        <i class="fa fa-shopping-basket"></i> @if (!Model.IgnorePicture)
                                                              {
                                                                  @addToCartText
                                                              }
                    </button>
                        @if (Model.IgnorePicture)
                        {
                            <button type="button" value="" class="btn Addcart product-box-add-to-cart-button" onclick="setLocation('@Url.RouteUrl("Product", new {SeName = Model.SeName})')">
                                <i class="fa fa-eye"></i>
                            </button>
                        }
                    }

                    @if (!Model.ProductPrice.DisableWishlistButton)
                    {
                        <button type="button" value=" " title="" class="btn hover-btn add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">
                            <i class="fa fa-heart fa-fw"></i> @*@T("ShoppingCart.AddToWishlist")*@
                        </button>
                    }
                    @if (!Model.ProductPrice.DisableAddToCompareListButton)
                    {
                        <button type="button" value=" " title="" class="btn hover-btn add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">
                            <i class="fa fa-retweet"></i> @*@T("ShoppingCart.AddToCompareList")*@
                        </button>
                    }
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
            </div>
        </div>
    </div>
